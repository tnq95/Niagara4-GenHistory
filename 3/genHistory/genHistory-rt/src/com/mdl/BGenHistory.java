/* Auto-generated by the Program Module-Builder. */
package com.mdl;

import javax.baja.collection.BITable;
import javax.baja.collection.Column;
import javax.baja.collection.TableCursor;
import javax.baja.control.BBooleanWritable;
import javax.baja.control.BEnumWritable;
import javax.baja.control.BNumericWritable;
import javax.baja.history.ext.BBooleanIntervalHistoryExt;
import javax.baja.history.ext.BHistoryExt;
import javax.baja.history.ext.BNumericIntervalHistoryExt;
import javax.baja.naming.BOrd;
import javax.baja.sys.*;
import javax.baja.status.*;
import javax.baja.history.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class BGenHistory
  extends BComponent implements Runnable
{
////////////////////////////////////////////////////////////////
// Property "typeHist"
////////////////////////////////////////////////////////////////
  public static final Property typeHist = newProperty(Flags.SUMMARY, new BStatusEnum(), null);
  public BStatusEnum getTypeHist() { return (BStatusEnum)get(typeHist); }
  public void setTypeHist(BStatusEnum v) { set(typeHist, v, null); }


////////////////////////////////////////////////////////////////
// Property "queryString"
////////////////////////////////////////////////////////////////
  public static final Property queryString = newProperty(Flags.SUMMARY, (BValue)BString.TYPE.getInstance(), null);
  public String getQueryString() { return getString(queryString); }
  public void setQueryString(String v) { setString(queryString, v, null); }


////////////////////////////////////////////////////////////////
// Property "historyConfig"
////////////////////////////////////////////////////////////////
  public static final Property historyConfig = newProperty(Flags.SUMMARY, new BHistoryConfig(), null);
  public BHistoryConfig getHistoryConfig() { return (BHistoryConfig)get(historyConfig); }
  public void setHistoryConfig(BHistoryConfig v) { set(historyConfig, v, null); }


////////////////////////////////////////////////////////////////
// Property "interval"
////////////////////////////////////////////////////////////////
  public static final Property interval = newProperty(Flags.SUMMARY, (BValue)BRelTime.TYPE.getInstance(), null);
  public BRelTime getInterval() { return (BRelTime)get(interval); }
  public void setInterval(BRelTime v) { set(interval, v, null); }


////////////////////////////////////////////////////////////////
// Action "execute"
////////////////////////////////////////////////////////////////
  public static final Action execute = newAction(Flags.ASYNC, null, null);
  public void execute(){ invoke(execute, null, null); }

  /** Autogenerated delegate for "onExecute" */
  public void doExecute() throws Exception
  {
    try { onExecute(); }
    catch (Throwable t) { throw new Exception(t); }
  }

////////////////////////////////////////////////////////////////
// BComponent Overrides
////////////////////////////////////////////////////////////////

  public void started() throws Exception { try { onStart(); } catch(Throwable t) { throw new Exception(t); } }
  public void stopped() throws Exception { try { onStop(); } catch(Throwable t) { throw new Exception(t); } }

  public void changed(Property prop, Context cx)
  {
    super.changed(prop, cx);
    if (!isRunning()) return;
    if (Flags.isExecuteOnChange(this, prop)) execute();
  }


////////////////////////////////////////////////////////////////
// Runnable
////////////////////////////////////////////////////////////////
  public void run() { System.out.println("Source BProgram did not override run(). Exiting thread."); }


////////////////////////////////////////////////////////////////
// Access
////////////////////////////////////////////////////////////////
  public final BComponent getComponent() { return this; }
  public final BComponent getProgram() { return this; }


  //String HistoryDeviceName = Sys.getHostName();
  String thisStationName = Sys.getStation().getStationName();
  List<BHistoryId> lstHist = null;
  //BTypeSpec typespec = null;
  String extName = "";
  
  public void onStart() throws Exception
  {
    // start up code here
  }
  
  public void onExecute() throws Exception
  {
    BOrd ord = BOrd.make(getQueryString().trim());
    String strIn = StatusEnumToString();
    configExt(strIn);

    createHistory(ord);
    updateHistoryExt();

  }
  
  public void onStop() throws Exception
  {
    // shutdown code here
  }

  public void createHistory(BOrd ord)
  { 
    lstHist = new ArrayList<BHistoryId>();
    BITable result = (BITable)ord.resolve().get();
    Column[]columns = result.getColumns().list();
      
    Column pSlot = columns[0];
    Column pType = columns[1];
    
    TableCursor c = (TableCursor)result.cursor();
  
    while (c.next())
    {
      String point = BOrd.make("station:|" + c.cell(pSlot).toString()) + "";
      //println("Point: "+ point);
          
      String historyName = point.substring(point.lastIndexOf('/')).trim();
      historyName = "/" + thisStationName + historyName;
      lstHist.add(BHistoryId.make(historyName));
      
      try{
        Object obj = BOrd.make(point).resolve().get();
        if(obj instanceof BNumericWritable){
          ((BNumericWritable)obj).add(extName, new BNumericIntervalHistoryExt());
        }
        else if(obj instanceof BBooleanWritable){
          ((BBooleanWritable)obj).add(extName, new BBooleanIntervalHistoryExt());
        }
        // ....
      } 
      catch(DuplicateSlotException e){
        System.out.println("Duplicate Slot Exception in: " + point);
      }
      catch(Exception e){
          System.out.println("Exception: " + e);
      }
    }
  }

  private void updateHistoryExt() throws Exception {  
     int idx = getQueryString().lastIndexOf('|');
     String qrString = getQueryString().substring(0,idx).trim() + "|bql:select * from history:HistoryExt";
     BOrd ord = BOrd.make(qrString);
     BITable result = (BITable)ord.resolve().get();
     try(TableCursor c = (TableCursor)result.cursor()){
        while(c.next()){
          BHistoryExt jg = (BHistoryExt)c.get();
          BHistoryConfig jg2 = jg.getHistoryConfig();
          
          jg.setEnabled(false);
          //jg2.setRecordType(typespec);
          jg2.setCapacity(getHistoryConfig().getCapacity());
          jg2.setInterval(BCollectionInterval.make(getInterval()));
          
          jg.setEnabled(true);
        }
     }
  }

  public void configExt(String in){
    if(in.equals("NumericInterval")){
       extName = "NumericInterval";
       //trendRecord = "NumericTrendRecord";
       //typespec = BTypeSpec.make(new BNumericTrendRecord().getType());
    }
    else if(in.equals("BooleanInterval")){
       extName = "BooleanInterval";
       //typespec = BTypeSpec.make(new BBooleanTrendRecord().getType());
    }
    //...
  }
  
  public String StatusEnumToString() throws Exception{
    String result = "";
    try
     {
        BLink[] links = getTypeHist().getParentComponent().getLinks(); //getLinks(getType());
         for (BLink link : links) {
             if ((link.getSourceComponent().getType() != BEnumWritable.TYPE)) {
                 continue;
             }
             BEnumWritable sc = ((BEnumWritable) link.getSourceComponent());
             BEnumRange range = ((BEnumRange) sc.getFacets().get("range"));
             result = range.getDisplayTag(getTypeHist().getValue().getOrdinal(), null);
         }
     }
     catch (Exception e) 
     {
         System.out.println(" getMessage = " + e.getMessage() + "\n getStackTrace = "
       + Arrays.toString(e.getStackTrace()) + "\n toString = " + e.toString());
     }
     return result;
  } 

////////////////////////////////////////////////////////////////
// Type
////////////////////////////////////////////////////////////////

  public Type getType() { return TYPE; }
  public static final Type TYPE = Sys.loadType(BGenHistory.class);

}
